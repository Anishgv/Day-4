Functions 
Set of statements that performs specific task.
Syntax :
function functionname (parameter){
    // set of statements
}
functionname();
Example :
function mul (a,b){
    console.log(a*b)
}
mul (2,4);

functions always return a value 
Return : to reduce number of time code executed 
function name is user defined 
if print without return then it shows undefined
function used for dry codes.
one function have only one return keyword
Example 
function mul (a,b,c){
    return a*b*c
}
console.log(mul(1,2,3));
-----------------------------------------------------------------------------------------------------
// To print odd numbers in a array 

var arr = [6,8,12,15,17,19,23,27];
var result =[];
function odd(arr){
    for(var i=0;i<arr.length;i++){
        if(arr[i]%2!=0){
            result.push(arr[i]);

        }
    }
    return result;
}

console.log(odd(arr));
-----------------------------------------------------------------------------------------------------

Types of functions
1.Anonymous function
2.IIFE (Immediately Invoked function Expression)
3.Arrow function - ES6

-----------------------------------------------------------------------------------------------------
1.Anonymous function
A function without name 
Example
var arr = [1,3,4,6,78,89,34,43,57];
var odd = function(arr){
    var result =[];
    for(var i=0;i<arr.length;i++){
        if(arr[i]%2!=0){
            result.push(arr[i]);

        }
    }
    return result;
}
console.log(odd(arr));
--------------------------------------------------------------------------------------------------------------
2.IIFE (Immediately Invoked function Expression)

(function odd(arr){
    for(var i=0;i<arr.length;i++){
        if(arr[i]%2!=0){
            result.push(arr[i]);

        }
    }
    console.log(result) ;
})([31,32,33,34,35,36,37])

-----------------------------------------------------------------------------------------------------------------------

3.Arrow function
Introduced in ES6 .It has a  => keyword & return keyword is must 
function a(){

}this has been overcomed as
var a = (arr)=>{
    
}

Example:

var odd = (arr)=>{
    var result =[];
    for(var i=0;i<arr.length;i++){
        if(arr[i]%2!=0){
            result.push(arr[i]);

        }
    }
    return result; 
}

console.log (odd([31,32,33,34,35,36,37]))

------------------------------------------------------------------------------------------------------------------------
//function without parameter

function greet (){
    console.log("Welcome")
}
greet()
-------------------------------------------------------------------------------------------------------------------
Template literals
It help us overcome concatenation
`${expression}`
var a =10;
var b = 20;
console.log(`the sum of two number a & b = $(a+b)`)
------------------------------------------------------------------------------------------------------------------------
//spread operator 
Convert a string into character Array
syntax : ...
exanple 1
var arr["Trinethra];
console.log(...arr)
//examle 2 
var arr1 =["bob","john","sofia"];
var arr2 =["Anish","TTS"];
var arr3 = [...arr1 , ...arr2];
console.log(arr3)
------------------------------------------------------------------------------------------------------------------------
Rest Parameters 
It is used inside the function.
To consider remaining values 

function foo(a,b...rest){
    var sum = 0;
    for (var i=0;i<rest.length;i++){
        sum = sum + rest[i];
    }
    return sum ;
}
console.log(foo(12,13,14,15,16,17))






